<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on jpnt&#39;s website</title>
    <link>https://jpnt.github.io/tags/programming/</link>
    <description>Recent content in programming on jpnt&#39;s website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© João Pinto</copyright>
    <lastBuildDate>Tue, 18 Jan 2022 14:56:45 -0100</lastBuildDate><atom:link href="https://jpnt.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Most People Fail to Get I.T.</title>
      <link>https://jpnt.github.io/posts/why-most-people-fail-to-get-it/</link>
      <pubDate>Tue, 18 Jan 2022 14:56:45 -0100</pubDate>
      
      <guid>https://jpnt.github.io/posts/why-most-people-fail-to-get-it/</guid>
      <description>The Information Technology field is immensely vast, however, one can break it down in three core aspects.
What is IT? Programming Computer Networking Operating Systems The problem The issue is that most people, even ones on the field, fail to grasp the core basics. They try to invent theories on what information technology is, and end up abstracting real problems with layers of garbage that just create new problems.
IT is not social studies and humanities, it is all about engineering and math, knowing how to approach a problem and solve it in the most optimal and correct way, it involves logic reasoning without a place for ambiguities.</description>
    </item>
    
    <item>
      <title>Modern Software is a disaster</title>
      <link>https://jpnt.github.io/posts/modern-software/</link>
      <pubDate>Sat, 15 Jan 2022 21:02:39 -0100</pubDate>
      
      <guid>https://jpnt.github.io/posts/modern-software/</guid>
      <description>&amp;ldquo;Designing simple and elegant software is far more difficult than letting ad-hoc or over-ambitious features obscure the code over time.&amp;rdquo; &amp;ndash; suckless.org
We live in a really agitated world where information flows much faster than anyone could ever grasp. Due to the agile technological advancements and the appearance of new technologies every day, the demand for people on the Information Technology sector is extremely high.
However, because there is still so much software to write, there is no market pressure in the software space to ship high quality code.</description>
    </item>
    
    <item>
      <title>Rust Ownership</title>
      <link>https://jpnt.github.io/posts/rust-ownership/</link>
      <pubDate>Mon, 02 Aug 2021 15:44:10 +0000</pubDate>
      
      <guid>https://jpnt.github.io/posts/rust-ownership/</guid>
      <description>Understanding Ownership Ownership is what enables Rust to make memory safety guarantees without needing a garbage collector.
What is a Garbage collector? Garbage collection (GC) is a form of automatic memory management.
It attempts to reclaim memory which was allocated by the program, but is no longer used &amp;mdash; hence the name garbage.
GC exists to relieve the programmer from manually managing memory, which can be susceptible to errors such as memory leaks.</description>
    </item>
    
  </channel>
</rss>
